def generate_weigths(nn, a):
    weigths = []
    for i in range(1, len(nn)):
        weigths.append([])
        for j in range(len(nn[i]) - 1):
            weigths[i - 1].append([a for k in nn[i - 1]])
    return weigths


if __name__ == '__main__':
    nn = [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 'dont del']]
    nn2 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 'dont del']]
    nn3 = [[1, 2, 3, 4, 5],
           [1, 2, 3, 4, 5, 6, 7, 8],
           [1, 2, 3, 4, 5, 6, 7, 8],
           [1, 2, 3, 4, 5, 6, 7, 8],
           [1, 2, 3, 4, 5, 6, 7, 8],
           [1, 2, 3, 4, 5, 6, 7, 8],
           [1, 2, 3, 'dont del']]
    assert generate_weigths(nn, 1) == [[[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                                    [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],
                                    [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],
                                    [[1, 1, 1, 1], [1, 1, 1, 1]]]
    assert generate_weigths(nn2, 1) == [[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]],
                                     [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],
                                     [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],
                                     [[1, 1, 1, 1], [1, 1, 1, 1]]]
    assert generate_weigths(nn3, 1) == [[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]],
                                     [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]],
                                     [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]],
                                     [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]],
                                     [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]],
                                     [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]]]

